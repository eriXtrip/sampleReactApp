var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx } from "react/jsx-runtime";
import { useState } from 'react';
import WebView from 'react-native-webview';
export default function DocumentView(_a) {
    var uri = _a.uri, _b = _a.scale, scale = _b === void 0 ? 1 : _b, _c = _a.controls, controls = _c === void 0 ? true : _c, style = _a.style, renderLoading = _a.renderLoading, onLoad = _a.onLoad, onError = _a.onError;
    var _d = useState('loading'), status = _d[0], setStatus = _d[1];
    var _e = useState(Date.now()), renderKey = _e[0], setRenderKey = _e[1];
    var _f = useState(0), adjustScaleHack = _f[0], setAdjustScaleHack = _f[1];
    var controlsObj = __assign({ page: typeof controls === 'boolean' ? controls : true, zoom: typeof controls === 'boolean' ? controls : true }, (typeof controls === 'boolean' ? {} : controls));
    var scaleObj = __assign({ initial: typeof scale === 'number' ? scale : 1, min: typeof scale === 'number' ? scale : 1, max: typeof scale === 'number' ? scale : 1 }, (typeof scale === 'number' ? {} : scale));
    var styles = "\n    /* Hide button \"open on new window\" */\n    .ndfHFb-c4YZDc-Wrql6b {\n      display: none !important;\n    }\n\n    /* Fix smooth scroll on iOS */\n    .ndfHFb-c4YZDc-cYSp0e-s2gQvd {\n      -webkit-overflow-scrolling: touch;\n    }\n\n    /* Controls: PAGE */\n    .ndfHFb-c4YZDc-DARUcf-NnAfwf-i5oIFb {\n      ".concat(controlsObj.page ? '' : 'display: none !important;', "\n    }\n\n    /* Controls: ZOOM */\n    .ndfHFb-c4YZDc-nJjxad-nK2kYb-i5oIFb {\n      ").concat(controlsObj.zoom ? '' : 'display: none !important;', "\n    }\n  ");
    var scripts = "\n    const $info = document.querySelector('#drive-active-item-info');\n\n    if (!$info) {\n      window.ReactNativeWebView.postMessage('reload');\n    } else {\n      const mimeType = JSON.parse($info.innerText).mimeType;\n      window.ReactNativeWebView.postMessage(mimeType ? 'ready' : 'error');\n    }\n\n    const meta = document.createElement('meta');\n    meta.setAttribute('content', 'width=device-width, initial-scale=".concat(scaleObj.initial, ", minimum-scale=").concat(scaleObj.min, ", maximum-scale=").concat(scaleObj.max, "');\n    meta.setAttribute('name', 'viewport');\n    document.head.appendChild(meta);\n\n    const styleSheet = document.createElement('style');\n    styleSheet.type = 'text/css';\n    styleSheet.innerText = '").concat(styles, "';\n    document.head.appendChild(styleSheet);\n  ");
    function handleLoad(e) {
        if (status === 'ready') {
            onLoad === null || onLoad === void 0 ? void 0 : onLoad(e);
        }
        if (status === 'error') {
            onError === null || onError === void 0 ? void 0 : onError(e);
        }
    }
    function handleMessage(_a) {
        var nativeEvent = _a.nativeEvent;
        var status = nativeEvent === null || nativeEvent === void 0 ? void 0 : nativeEvent.data;
        if (status === 'reload') {
            setRenderKey(Date.now());
        }
        if (status === 'ready') {
            // Hack for iOS: PAGE SCALE
            setTimeout(function () { return setAdjustScaleHack(function (current) { return Number(!current); }); }, 200);
            setTimeout(function () { return setAdjustScaleHack(function (current) { return Number(!current); }); }, 400);
        }
        setStatus(status);
    }
    return (_jsx(WebView, { scrollEnabled: true, javaScriptEnabled: true, domStorageEnabled: true, startInLoadingState: true, mixedContentMode: "always", contentMode: "mobile", originWhitelist: ['*'], injectedJavaScript: scripts.replace(/[\r\n]/g, ''), source: { uri: "https://docs.google.com/viewer?embedded=true&url=".concat(encodeURIComponent(uri)) }, style: style, containerStyle: { borderWidth: adjustScaleHack, borderColor: 'transparent' }, renderLoading: renderLoading, 
        // @ts-expect-error
        onLoad: handleLoad, onMessage: handleMessage }, renderKey));
}
