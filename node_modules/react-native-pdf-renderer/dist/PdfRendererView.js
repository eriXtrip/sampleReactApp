// MIT License
// Copyright (c) 2023 Douglas Nassif Roma Junior
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
import React, { useCallback, useMemo } from 'react';
import { StyleSheet, } from 'react-native';
import PdfRendererNative from './specs/RNPdfRendererViewNativeComponent';
const styles = StyleSheet.create({
    default: {
        backgroundColor: 'gray',
        flex: 1,
    },
});
const PdfRendererView = ({ testID = undefined, onPageChange, onError = undefined, style, source, singlePage = false, distanceBetweenPages = 16, maxZoom = 5, maxPageResolution = 2048, }) => {
    const viewStyles = useMemo(() => [
        styles.default,
        style,
        {
            // See https://github.com/douglasjunior/react-native-pdf-renderer#limitations
            borderRadius: undefined,
        },
    ], [style]);
    const handlePageChange = useCallback((event) => {
        onPageChange?.(event.nativeEvent.position, event.nativeEvent.total);
    }, [onPageChange]);
    const handleError = useCallback((event) => {
        if (!onError && __DEV__) {
            console.warn('react-native-pdf-renderer: An error occurred while rendering the PDF.', event.nativeEvent);
            return;
        }
        onError?.();
    }, [onError]);
    const params = useMemo(() => ({
        source,
        singlePage,
        maxZoom,
    }), [source, singlePage, maxZoom]);
    return (React.createElement(PdfRendererNative, { testID: testID, maxPageResolution: maxPageResolution, distanceBetweenPages: distanceBetweenPages, style: viewStyles, params: params, onPageChange: handlePageChange, onError: handleError, 
        // old architecture events for iOS, because iOS require unique names
        // @ts-ignore
        onRnPdfPageChange: handlePageChange, onRnPdfError: handleError }));
};
export default PdfRendererView;
//# sourceMappingURL=PdfRendererView.js.map